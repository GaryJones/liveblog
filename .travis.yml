language: php

cache:
    apt: true
    yarn: true
    directories:
        - $HOME/.composer/cache/files
        - $HOME/.yarn/node_modules
        - node_modules

matrix:
    include:
        # aliased to a recent 5.6.x version
        - php: '5.6'
          env:
            - WP_VERSION=latest
            - WP_MULTISITE=0
        - php: '5.6'
          env:
            - WP_VERSION=latest
            - WP_MULTISITE=1
        # aliased to a recent 7.x version
        - php: '7.0'
          env:
            - SNIFF=1
            - WP_VERSION=latest


before_script:
    # Set up CodeSniffer and standards.
    - if [[ "$SNIFF" == "1" ]]; then composer install; fi
    # Set up unit tests
    - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
    # Install npm modules
    - yarn

script:
    # Search for PHP syntax errors.
    - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
    # WordPress Coding Standards.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs; fi
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs --standard="WordPressVIPMinimum"; fi
    # Run unit tests
    - phpunit
    # Run linting
    - npm run lint-scripts
    - npm run lint-styles
